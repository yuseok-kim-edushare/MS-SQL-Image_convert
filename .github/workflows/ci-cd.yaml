name: CI-CD
on:
    push:
        branches: [ "main" ]
        paths-ignore:
            - '**/*.md'

permissions:
  contents: write
  discussions: write

jobs:
  build:
    runs-on: windows-2022
    env:
      BUILD_CONFIG: Release

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-tags: true
        fetch-depth: 0

    - name: Get USERPROFILE and set CACHE_PATH
      id: set_cache_path
      shell: pwsh
      run: |
        $cachePath = "$env:USERPROFILE\.nuget\packages"
        echo "CACHE_PATH=$cachePath" >> $env:GITHUB_ENV
  
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.nuget/packages
          ${{ env.CACHE_PATH }}
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.sln') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: |
        dotnet restore MS-SQL-Image_convert.csproj
    
    - name: Build solution for release
      run: |
        dotnet build MS-SQL-Image_convert.csproj --configuration ${{ env.BUILD_CONFIG }} --no-restore -f net481
       
    - name: Get latest release version and Generate release notes
      id: get_latest_release
      run: |
        try {
          $latest_release = $(git describe --tags --abbrev=0)
          Write-Output "Latest release version: $latest_release"
          echo "latest_release=$latest_release" >> $env:GITHUB_ENV
          $versionParts = $latest_release.Split('.')
          $versionParts[-1] = [int]$versionParts[-1] + 1
          $newVersionString = $versionParts -join '.'
          
          $releaseNotes = "## Changes in " + $latest_release + "`n"
          $releaseNotes += (git log HEAD ^$latest_release --oneline) -join "`n"
          $releaseNotes += "`n"
          $releaseNotes += "### File edited `n"
          $releaseNotes += "`n"
          $releaseNotes += (git diff HEAD ^$latest_release --compact-summary) -join "`n"
        } catch {
          Write-Output "No previous release found. Creating initial release 0.0.1"
          $newVersionString = "0.0.1"
          
          $releaseNotes = "## Initial Release v0.0.1`n"
          $releaseNotes += (git log --oneline) -join "`n"
          $releaseNotes += "`n"
          $releaseNotes += "### Files included `n"
          $releaseNotes += "`n"
          $releaseNotes += (git ls-files | ForEach-Object { "Added $_" }) -join "`n"
        }
        
        echo "new_release=$newVersionString" >> $env:GITHUB_ENV
        $releaseNotes | Out-File -FilePath releaseNotes.txt -Encoding utf8
        $releaseNotesContent = Get-Content -Path releaseNotes.txt -Raw
        echo "release_notes<<EOF" >> $env:GITHUB_ENV
        echo "$releaseNotesContent" >> $env:GITHUB_ENV
        echo "EOF" >> $env:GITHUB_ENV

    - name: Explicit Version Order apply to create release
      run: |
        $latestCommitMessage = (git log -1 --pretty=%B)
        foreach ($line in $latestCommitMessage) {
          if ($line -match "Update Version to (\d+\.\d+\.\d+)") {
            $messageParts = $line -split ' '
            $lastPart = $messageParts[-1]
            echo "new_release=$lastPart" >> $env:GITHUB_ENV
          }
        }
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ${{ github.workspace }}\bin\Release\net481\win-x64\MS-SQL-Image_convert.dll
          ${{ github.workspace }}\deploy_multiple.ps1
          ${{ github.workspace }}\deploy_single_db.sql
        tag_name: ${{ env.new_release }}
        name: Release ${{ env.new_release }}
        body: ${{ env.release_notes }}
        draft: false
        prerelease: false
        fail_on_unmatched_files: true

